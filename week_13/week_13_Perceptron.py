# -*- coding: utf-8 -*-
"""
Created on Mon Jun  3 13:50:00 2024

@author: Honghee Kim
"""

## 4.3.2 신경망의 학습 알고리즘 (p.19) ## 55:48

import numpy as np
import os

def costf(w,x,y): ## 행@열 벡터 내적(곱)하는 과정
    yp = w.T@x
    '''
    yp  = [[0 0 0 0]]
    y.T = [[-1  1  1  1]]
    '''    
    return (yp-y.T)@(yp-y.T).T 
    
def gradJ(w): ## w, w1, w2 미분한거 차례대로
    ## w 는 값이 3개인 벡터임
    
    return np.array([8*w[0]+4*w[1]+4*w[2]-4, \
                     4*w[0]+4*w[1]+2*w[2]-4, \
                     4*w[0]+2*w[1]+4*w[2]-4])
    
    pass

def step_func(x): ## tau function
    y = x > 0 ## True or False
    return 2*y.astype(int)-1 ## --> y=True, y.astype(int) = 1 // y=False, y.astype(int) = 0


# print(step_func(np.array([-1.2,0.3]))) ## [-1  1]

xi = np.array([[1,1,1,1],[0,1,0,1],[0,0,1,1]]) ## 행렬
yi = np.array([[-1],[1],[1],[1]]) ## 우리가 알고있는 정답

###############################################################################
## 변경하면서 테스트해보기 result (wi_a.T, wi.T)
wi = np.array([[0],[0],[0]])   ## [[1 0 0]] [[-0.49493035  0.99572593  0.99572593]]
wi = np.array([[1],[0],[0]])   ## [[0 0 0]] [[-0.49498225  0.99576969  0.99576969]]
wi = np.array([[3],[0],[0]])   ## [[3 0 0]] [[-0.49495836  0.99574954  0.99574954]]
wi = np.array([[0],[1],[0]])   ## [[0 1 0]] [[-0.49495438  0.99601850  0.99547387]]
wi = np.array([[0],[0],[4]])   ## [[0 0 4]] [[-0.50474664  1.00279672  1.00520679]]

wi = np.array([[0],[10],[1]])    ## [[0  10     1  ]] [[-0.5050241   1.00440595  1.0040654 ]]
wi = np.array([[0],[0.1],[0]])   ## [[0.  0.1   0. ]] [[-0.4949894   0.99578887  0.99576256]]
wi = np.array([[0],[0.01],[0]])  ## [[0.  0.01  0. ]] [[-0.49493806  0.99573369  0.99573116]]
wi = np.array([[0],[0.001],[0]]) ## [[0.  0.001 0. ]] [[-0.49498419  0.99577144  0.99577119]]
###############################################################################

wi_a = wi
alpha = 0.01
J = costf(wi,xi,yi) ## [[4]]
while(True):
    
    JP   = J
    
    delw = alpha * gradJ(wi)
    wi   = wi - delw    
    J    = costf(wi,xi,yi)
    
    #print(J, wi.T, wi.T@xi, step_func(wi.T@xi))    
    if(np.abs((J-JP)/J) < 0.000001) :  break

print('-----')
print(wi_a.T, wi.T) ## 교재에서 최종wi = [-0.5, 1, 1] 로 결정됨